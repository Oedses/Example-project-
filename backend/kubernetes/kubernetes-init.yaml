---
apiVersion: v1
kind: Namespace
metadata:
  name: develop
---
apiVersion: v1
kind: Secret
metadata:
  name: mongo
  namespace: develop
data:
  MONGO_INITDB_ROOT_USERNAME:
  MONGO_INITDB_ROOT_PASSWORD:
type: Opaque
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-dev
  labels:
    mongo: dev
spec:
  capacity:
    storage: 20Gi
  storageClassName: default
  azureDisk:
    kind: Managed
    diskName: mongo-dev
    diskURI:
    fsType: ext4
    cachingMode: ReadOnly
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  claimRef:
    kind: PersistentVolumeClaim
    name: mongo-dev
    namespace: develop
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mongo-dev
  namespace: develop
  labels:
    project: "tokyo"
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: default
  resources:
    requests:
      storage: 20Gi
  selector:
    matchLabels:
      mongo: dev
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service
  namespace: develop
  labels:
    project: "tokyo"
    app: service
spec:
  replicas: 1
  selector:
    matchLabels:
      project: "tokyo"
      app: service
      env: dev
  template:
    metadata:
      labels:
        project: "tokyo"
        app: service
        env: dev
    spec:
      containers:
      - name: service
        image:
        ports:
          - containerPort: 8080
        imagePullPolicy: Always
        volumeMounts:
          - name: env
            mountPath: "/app/.env"
            subPath: .env
            readOnly: true
      restartPolicy: Always
      priorityClassName: service
      volumes:
        - name:  env
          configMap:
            name: env
---
kind: Service
apiVersion: v1
metadata:
  name: service
  namespace: develop
  labels:
    project: "tokyo"
spec:
  selector:
    app: service
    env: dev
  type: ClusterIP
  ports:
  - name: app
    port: 80
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  namespace: develop
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  labels:
    project: "tokyo"
spec:
  tls:
    - hosts:
        -
  rules:
    - host:
      http:
        paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: service
              port:
                number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: develop
  labels:
    project: "tokyo"
    app: mongo
    env: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      project: "tokyo"
      app: mongo
      env: dev
  revisionHistoryLimit: 2
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        project: "tokyo"
        app: mongo
        env: dev
    spec:
      containers:
        - name: mongo
          image: mongo:4.2
          imagePullPolicy: IfNotPresent
          args:
            - --auth
          volumeMounts:
            - name: data
              mountPath: /data/db
          envFrom:
            - secretRef:
                name: mongo
          ports:
            - name: mongo
              containerPort: 27017
          securityContext:
            privileged: true
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 75
            periodSeconds: 60
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mongo-dev
      restartPolicy: Always
      priorityClassName: db
---
kind: Service
apiVersion: v1
metadata:
  name: mongo
  namespace: develop
spec:
  ports:
    - name: mongo
      port: 27117
      targetPort: 27017
  selector:
    app: mongo
    env: dev
  type: ClusterIP
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: db
value: 1000000
globalDefault: false
description: "Class for db pods"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: service
value: 100000
globalDefault: false
description: "Class for service pods"